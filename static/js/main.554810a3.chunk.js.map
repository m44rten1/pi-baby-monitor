{"version":3,"sources":["../node_modules/peerjs/dist sync","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","defaultSignInInfo","password","rememberMe","SIGN_IN_INFO_KEY","storedSignInInfo","localStorage","getItem","JSON","parse","App","useState","connected","setConnected","signInInfo","setSignInInfo","isLoading","setIsLoading","onSignInInfoChange","prop","value","className","action","placeholder","autoComplete","required","onChange","target","disabled","type","checked","onClick","event","preventDefault","peer","Peer","on","conn","connect","send","data","call","answer","undefined","stream","setItem","stringify","video","document","getElementById","srcObject","play","hidden","style","objectFit","width","height","controls","autoPlay","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.554810a3.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 15;","/* tslint:disable */\n\nimport React, { useState } from \"react\";\nimport \"bulma/css/bulma.min.css\";\nimport \"./App.css\";\n\nimport Peer, { util } from \"peerjs\";\n\ndeclare global {\n  interface Window {\n    peerjs: { util: util };\n  }\n}\n\ntype SignInInfo = {\n  id: string;\n  password: string;\n  rememberMe: boolean;\n};\n\nlet defaultSignInInfo: SignInInfo = {\n  id: \"\",\n  password: \"\",\n  rememberMe: false,\n};\nconst SIGN_IN_INFO_KEY = \"SIGN_IN_INFO\";\nconst storedSignInInfo = localStorage.getItem(SIGN_IN_INFO_KEY);\n\nif (storedSignInInfo) {\n  defaultSignInInfo = JSON.parse(storedSignInInfo);\n}\n\nconst App = () => {\n  const [connected, setConnected] = useState(false);\n  const [signInInfo, setSignInInfo] = useState(defaultSignInInfo);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const onSignInInfoChange = <P extends keyof SignInInfo>(\n    prop: P,\n    value: SignInInfo[P]\n  ) => {\n    setSignInInfo({ ...signInInfo, [prop]: value });\n  };\n\n  const connect = (event: React.FormEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const peer = new Peer();\n    peer.on(\"open\", () => {\n      const conn = peer.connect(signInInfo.id);\n      conn.on(\"open\", () => {\n        conn.send(signInInfo.password);\n      });\n\n      conn.on(\"data\", (data) => {\n        if (data === \"wrong\") {\n          setIsLoading(false); // TODO: show wrong password message..., add timeout also?\n        }\n\n        if (data === \"permission-failure\") {\n          setIsLoading(false); // TODO: handle no permissions error...\n        }\n      });\n    });\n\n    peer.on(\"call\", (call) => {\n      call.answer(undefined);\n\n      call.on(\"stream\", (stream) => {\n        setIsLoading(false); // TODO: switch to video view here, unhide video...\n        setConnected(true);\n        if (signInInfo.rememberMe)\n          localStorage.setItem(SIGN_IN_INFO_KEY, JSON.stringify(signInInfo));\n        const video = document.getElementById(\"video\") as HTMLVideoElement;\n\n        if (video) {\n          video.srcObject = stream;\n          video.play();\n        }\n      });\n    });\n  };\n\n  return (\n    <>\n      {connected ? (\n        <></>\n      ) : (\n        <section className=\"hero is-primary is-fullheight\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <div className=\"columns is-centered\">\n                <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\n                  <form action=\"\" className=\"box\">\n                    <div className=\"field\">\n                      <label className=\"label\">Identifier</label>\n                      <div className=\"control has-icons-left\">\n                        <input\n                          placeholder=\"my-unique-id-12345!\"\n                          className=\"input\"\n                          autoComplete=\"on\"\n                          required\n                          value={signInInfo.id}\n                          onChange={(e) =>\n                            onSignInInfoChange(\"id\", e.target.value)\n                          }\n                          disabled={isLoading}\n                        />\n                        <span className=\"icon is-small is-left\">\n                          <i className=\"fa fa-id-card\"></i>\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"label\">Password</label>\n                      <div className=\"control has-icons-left\">\n                        <input\n                          type=\"password\"\n                          placeholder=\"*******\"\n                          className=\"input\"\n                          autoComplete=\"on\"\n                          required\n                          value={signInInfo.password}\n                          onChange={(e) =>\n                            onSignInInfoChange(\"password\", e.target.value)\n                          }\n                          disabled={isLoading}\n                        />\n                        <span className=\"icon is-small is-left\">\n                          <i className=\"fa fa-lock\"></i>\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"field\">\n                      <label className=\"checkbox\">\n                        <input\n                          type=\"checkbox\"\n                          checked={signInInfo.rememberMe}\n                          onChange={() =>\n                            onSignInInfoChange(\n                              \"rememberMe\",\n                              !signInInfo.rememberMe\n                            )\n                          }\n                          disabled={isLoading}\n                        />\n                        <span className=\"ml-1\">Remember me</span>\n                      </label>\n                    </div>\n                    <div className=\"field\">\n                      <button\n                        className={`button is-success ${\n                          isLoading ? \"is-loading\" : \"\"\n                        }`}\n                        onClick={connect}\n                      >\n                        Connect\n                      </button>\n                    </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      <video\n        id=\"video\"\n        hidden={!connected || isLoading}\n        style={{ objectFit: \"cover\", width: \"100vw\", height: \"100vh\" }}\n        controls\n        autoPlay\n      ></video>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}